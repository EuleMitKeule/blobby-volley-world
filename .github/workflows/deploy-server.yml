name: deploy-server

on:
  push:
    branches: [ master ]

  workflow_dispatch:

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  test:
    name: Testing
    runs-on: self-hosted
    steps:

      - name: Checking out
        uses: actions/checkout@v2
        with:
          lfs: true
          fetch-depth: 0

      - name: Caching Library
        uses: actions/cache@v2.1.4
        with:
          path: Library
          key: Library-blobby-volley-world-StandaloneLinux64

      - name: Running unit tests
        uses: game-ci/unity-test-runner@v2.0-alpha-2
        with:
          artifactsPath: ./deploy-server-test-results/

      - name: Uploading results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: ./deploy-server-test-results/

      - name: Storing results
        run: |
          mkdir -p ../test-results/server/temp
          mv ./deploy-server-test-results/* ../test-results/server/temp

  build:
    name: Building
    needs: test
    runs-on: self-hosted
    steps:
    
      - name: Checking out
        uses: actions/checkout@v2
        with:
          lfs: true
      
      - name: Caching Library
        uses: actions/cache@v2.1.4
        with:
          path: Library
          key: Library-blobby-volley-world-StandaloneLinux64
      
      - name: Building Server
        uses: game-ci/unity-builder@v2.0-alpha-6
        id: build
        with:
          targetPlatform: StandaloneLinux64
          buildsPath: ./deploy-server-builds/
          buildMethod: "Editor.Builder.BuildServerLinux"
          buildName: blobby-volley-world-server-linux
          versioning: Semantic

      - name: Storing build
        run: |
          mkdir -p ../builds/server/linux/${{ steps.build.outputs.buildVersion }}/
          cp -r ./deploy-server-builds/StandaloneLinux64/ ../builds/server/linux/${{ steps.build.outputs.buildVersion }}/

      - name: Storing test-results
        run: |
          mkdir -p ../test-results/server/${{ steps.build.outputs.buildVersion }}/
          mv ../test-results/server/temp/* ../test-results/server/${{ steps.build.outputs.buildVersion }}/

      - name: Building Docker Image
        run: |
          ls ./deploy-server-builds/StandaloneLinux64/
          cp ./serverData.json ./deploy-server-builds/StandaloneLinux64/serverData.json
          echo "###BUILD DIRECTORY###"
          docker build -t blobby-volley-world-server .

      - name: Deploying Docker Container
        run: |
          docker stop blobby-volley-world-server-1 || true && docker rm blobby-volley-world-server-1 || true
          docker stop blobby-volley-world-server-2 || true && docker rm blobby-volley-world-server-2 || true
          docker stop blobby-volley-world-server-3 || true && docker rm blobby-volley-world-server-3 || true
          docker stop blobby-volley-world-server-4 || true && docker rm blobby-volley-world-server-4 || true
          docker stop blobby-volley-world-server-5 || true && docker rm blobby-volley-world-server-5 || true
          docker run -d --name blobby-volley-world-server-1 -e LISTEN_PORT=13331 -e MASTER_SERVER_HOST=172.17.0.137 -p 13331:13331/udp blobby-volley-world-server
          docker run -d --name blobby-volley-world-server-2 -e LISTEN_PORT=13332 -e MASTER_SERVER_HOST=172.17.0.137 -p 13332:13332/udp blobby-volley-world-server
          docker run -d --name blobby-volley-world-server-3 -e LISTEN_PORT=13333 -e MASTER_SERVER_HOST=172.17.0.137 -p 13333:13333/udp blobby-volley-world-server
          docker run -d --name blobby-volley-world-server-4 -e LISTEN_PORT=13334 -e MASTER_SERVER_HOST=172.17.0.137 -p 13334:13334/udp blobby-volley-world-server
          docker run -d --name blobby-volley-world-server-5 -e LISTEN_PORT=13335 -e MASTER_SERVER_HOST=172.17.0.137 -p 13335:13335/udp blobby-volley-world-server

      - name: Zipping build
        uses: papeloto/action-zip@v1
        with:
          files: ../builds/server/linux/${{ steps.build.outputs.buildVersion }}/
          dest: ../builds/server/linux/${{ steps.build.outputs.buildVersion }}.zip

      - name: Cleanup
        run: |
          rm -r ../builds/server/linux/${{ steps.build.outputs.buildVersion }}/
          mkdir -p ../builds/server/linux/${{ steps.build.outputs.buildVersion }}/
          mv ../builds/server/linux/${{ steps.build.outputs.buildVersion }}.zip ../builds/server/linux/${{ steps.build.outputs.buildVersion }}/${{ steps.build.outputs.buildVersion }}.zip
          rm -r ../test-results/server/temp/
          docker rmi $(docker images -qa -f 'dangling=true')
